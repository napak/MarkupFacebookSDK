<?php

/**
 * Include Facebook SDK using best practices.
 *
 * Also provides some utility functions for including FBML components.
 * 
 * Module copyright 2012, Stephen Tomlinson
 *
 */

class MarkupFacebookSDK extends WireData implements Module, ConfigurableModule {

	/**
	 * getModuleInfo is a module required by all modules to tell ProcessWire about them
	 *
	 * @return array
	 *
	 */
	public static function getModuleInfo() {

		return array(

			// The module'ss title, typically a little more descriptive than the class name
			'title' => 'Facebook SDK', 

			// version: major, minor, revision, i.e. 100 = 1.0.0
			'version' => 100, 

			// summary is brief description of what this module is
			'summary' => "Include Facebook SDK",

			// singular=true: indicates that only one instance of the module is allowed.
			// This is usually what you want for modules that attach hooks. 
			'singular' => true, 

			// autoload=true: indicates the module should be started with ProcessWire.
			// This is necessary for any modules that attach runtime hooks, otherwise those
			// hooks won't get attached unless some other code calls the module on it's own.
			// Note that autoload modules are almost always also 'singular' (seen above).
			'autoload' => true, 
			
		);
		
	}
	
	/**
	 * Default configuration for module
	 *
	 * This is based on Ryan's examples [used also in @apeisa's AdminBar, for instance]
	 */
	protected static $defaultConfigData = array(
		'appId' => false,
	);
	
	/**
	 * Populate the default config data
	 *
	 */
	public function ___construct() {
	   foreach(self::$defaultConfigData as $key => $value) {
		   $this->$key = $value;
		   $data[$key] = $value;
	   }
	}

	/**
	 * Initialize the module
	 *
	 * ProcessWire calls this when the module is loaded. For 'autoload' modules, this will be called
	 * when ProcessWire's API is ready. As a result, this is a good place to attach hooks. 
	 *
	 */
	public function init() {
	
		// Intercept a request for a channel.html
		if (strpos($_SERVER['REQUEST_URI'], wire('config')->urls->root . 'channel.html') !== FALSE) { 
		
			header("Content-Type: text/html");
			$cache_expire = strtotime("+1 year",time());
			header("Pragma: public");
			header("Cache-Control: maxage=".$cache_expire);
			header('Expires: '.gmdate('D, d M Y H:i:s', time()+$cache_expire).' GMT');
			echo "<script src='//connect.facebook.net/en_US/all.js'></script>";
			exit;
			
		}
		
	}

	/**
	 * Example1 hooks into the pages->save method and displays a notice every time a page is saved
	 *
	 */
	public function render($event) {
	
		if($this->appId == false) {
		
			$output = "<!-- You have not set a Google Analytics tracking ID -->";
		
		} else {
		
			$channelUrl = "//" . $_SERVER['SERVER_NAME'] . $this->config->urls->root . "channel.html";
		
$output = <<<EOT
<div id="fb-root"></div>
<script>
  window.fbAsyncInit = function() {
    FB.init({
      appId      : '{$this->appId}', // App ID
      channelUrl : '{$channelUrl}', // Channel File
      status     : true, // check login status
      cookie     : true, // enable cookies to allow the server to access the session
      xfbml      : true  // parse XFBML
    });

    // Additional initialization code here
  };

  // Load the SDK Asynchronously
  (function(d){
     var js, id = 'facebook-jssdk', ref = d.getElementsByTagName('script')[0];
     if (d.getElementById(id)) {return;}
     js = d.createElement('script'); js.id = id; js.async = true;
     js.src = "//connect.facebook.net/en_US/all.js";
     ref.parentNode.insertBefore(js, ref);
   }(document));
</script>
EOT;
		
		}
		
		return $output;
	
	}
	
	/**
	 * Store details in the backend
	 *
	 */
	static public function getModuleConfigInputfields(array $data) {

		$inputfields = new InputfieldWrapper();
		
		$data = array_merge(self::$defaultConfigData, $data);
		
		$modules = wire('modules');

		$f = $modules->get('InputfieldText');
		$f->name = 'appId';
		$f->label = "App ID";
		$f->description = "Your Facebook AppId";
		$f->attr('value', $data[$f->name]);
		$inputfields->add($f);
		
		return $inputfields;

	}

	
}
